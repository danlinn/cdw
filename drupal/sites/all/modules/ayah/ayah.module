<?php

/**
 * @file
 * This module enables AYAH game functionality:
 * administrators can add a game to desired forms that users without
 * the 'skip AYAH' permission (typically anonymous visitors) have
 * to play.
 *
 */


/**
 * Implementation of hook_menu().
 */
function ayah_menu() {
	$items = array();

	$items['admin/user/ayah'] = array(
		'title' => 'AYAH',
		'description' => 'Administer how and where AYAH games are used.',
		'file' => 'ayah.admin.inc',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('ayah_admin_settings'),
		'access arguments' => array('administer AYAH settings'),
		'type' => MENU_NORMAL_ITEM,
	);
	$items['admin/user/ayah/ayah_game'] = array(
	    'title' => 'AYAH game administration',
	    'file' => 'ayah.admin.inc',
	    'page callback' => 'ayah_game_admin',
	    'page arguments' => array(4, 5),
	    'access arguments' => array('administer AYAH settings'),
	    'type' => MENU_CALLBACK,
	);
	return $items;
}


/**
 * Implementation of hook_perm().
 */
function ayah_perm() {
  return array('administer AYAH settings', 'skip AYAH');
}


/**
 * Implementation of hook_theme().
 */
function ayah_theme() {
  return array(
    'ayah_admin_settings_ayah_listforms' => array(
      'arguments' => array('form' => NULL),
    ),
	'ayah' => array(
	  'arguments' => array('element' => NULL),
	),
  );
}

/**
 * Implementation of hook_elements().
 */
function ayah_elements() {
  // Define the AYAH form element with default properties.
  $ayah_element = array(
    '#input' => TRUE,
    '#process' => array('ayah_process'),
    // The type of challenge: e.g. 'default', 'none', 'captcha/Math', 'image_captcha/Image', ...
    // '#captcha_type' => 'default',
    '#default_value' => '',
    // CAPTCHA in admin mode: presolve the AYAH and always show it (despite previous successful responses).
    // '#captcha_admin_mode' => FALSE,
    // The default CAPTCHA validation function.
    // TODO: should this be a single string or an array of strings (combined in OR fashion)?
    '#ayah_validate' => 'ayah_validate_game',
  );
  // // Override the default CAPTCHA validation function for case insensitive validation.
  // // TODO: shouldn't this be done somewhere else, e.g. in form_alter?
  // if (CAPTCHA_DEFAULT_VALIDATION_CASE_INSENSITIVE == variable_get('captcha_default_validation', CAPTCHA_DEFAULT_VALIDATION_CASE_INSENSITIVE)) {
  //   $captcha_element['#captcha_validate'] = 'captcha_validate_case_insensitive_equality';
  // }
  return array('ayah' => $ayah_element);
}


/**
 * Process callback for AYAH form element.
 */
function ayah_process($element, $edit, &$form_state, $complete_form) {

  // module_load_include('inc', 'ayah');
// echo 'ayah_process';
$element['#element_validate'] = array('ayah_validate');
return $element;

//////////////////////
// delete below this line

  // Add Javascript for general CAPTCHA functionality.
  drupal_add_js(drupal_get_path('module', 'captcha') . '/captcha.js');

  // Prevent caching of the page with CAPTCHA elements.
  // This needs to be done even if the CAPTCHA will be ommitted later:
  // other untrusted users should not get a cached page when
  // the current untrusted user can skip the current CAPTCHA.
  global $conf;
  $conf['cache'] = FALSE;

  // Get the form ID of the form we are currently processing (which is not
  // necessary the same form that is submitted (if any).
  $this_form_id = $complete_form['form_id']['#value'];

  // Get the CAPTCHA session ID.
  // If there is a submitted form: try to retrieve and reuse the
  // CAPTCHA session ID from the posted data.
  list($posted_form_id, $posted_captcha_sid) = _captcha_get_posted_captcha_info($element, $form_state, $this_form_id);
  if ($this_form_id == $posted_form_id && isset($posted_captcha_sid)) {
    $captcha_sid = $posted_captcha_sid;
  }
  else {
    // Generate a new CAPTCHA session if we could not reuse one from a posted form.
    $captcha_sid = _captcha_generate_captcha_session($this_form_id, CAPTCHA_STATUS_UNSOLVED);
  }

  // Store CAPTCHA session ID as hidden field.
  // Strictly speaking, it is not necessary to send the CAPTCHA session id
  // with the form, as the one time CAPTCHA token (see lower) is enough.
  // However, we still send it along, because it can help debugging
  // problems on live sites with only access to the markup.
  $element['captcha_sid'] = array(
    '#type' => 'hidden',
    '#value' => $captcha_sid,
  );

  // Additional one time CAPTCHA token: store in database and send with form.
  $captcha_token = md5(mt_rand());
  db_query("UPDATE {captcha_sessions} SET token='%s' WHERE csid=%d", $captcha_token, $captcha_sid);
  $element['captcha_token'] = array(
    '#type' => 'hidden',
    '#value' => $captcha_token,
  );

  // Get implementing module and challenge for CAPTCHA.
  list($captcha_type_module, $captcha_type_challenge) = _captcha_parse_captcha_type($element['#captcha_type']);

  // Store CAPTCHA information for further processing in
  // - $form_state['captcha_info'], which survives a form rebuild (e.g. node
  //   preview), useful in _captcha_get_posted_captcha_info().
  // - $element['#captcha_info'], for post processing functions that do not
  //   receive a $form_state argument (e.g. the pre_render callback).
  $form_state['captcha_info'] = array(
    'form_id' => $posted_form_id,
    'captcha_sid' => $captcha_sid,
    'module' => $captcha_type_module,
    'captcha_type' => $captcha_type_challenge,
  );
  $element['#captcha_info'] = array(
    'form_id' => $this_form_id,
    'captcha_sid' => $captcha_sid,
  );


  if (_captcha_required_for_user($captcha_sid, $this_form_id) || $element['#captcha_admin_mode']) {
    // Generate a CAPTCHA and its solution
    // (note that the CAPTCHA session ID is given as third argument).
    $captcha = module_invoke($captcha_type_module, 'captcha', 'generate', $captcha_type_challenge, $captcha_sid);
    if (!isset($captcha['form']) || !isset($captcha['solution'])) {
      // The selected module did not return what we expected: log about it and quit.
      watchdog('CAPTCHA',
        'CAPTCHA problem: unexpected result from hook_captcha() of module %module when trying to retrieve challenge type %type for form %form_id.',
        array('%type' => $captcha_type_challenge, '%module' => $captcha_type_module, '%form_id' => $this_form_id),
        WATCHDOG_ERROR);
      return $element;
    }
    // Add form elements from challenge as children to CAPTCHA form element.
    $element['captcha_widgets'] = $captcha['form'];

    // Add a validation callback for the CAPTCHA form element (when not in admin mode).
    if (!$element['#captcha_admin_mode']) {
      $element['#element_validate'] = array('captcha_validate');
    }

    // Set a custom CAPTCHA validate function if requested.
    if (isset($captcha['captcha_validate'])) {
      $element['#captcha_validate'] = $captcha['captcha_validate'];
    }

    // Add pre_render callback for additional CAPTCHA processing.
    $element['#pre_render'] = array('captcha_pre_render_process');

    // Store the solution in the #captcha_info array.
    $element['#captcha_info']['solution'] = $captcha['solution'];

  }

  return $element;
}


/**
 * Theme function for a AYAH element.
 *
 * Render it in a fieldset if a description of the AYAH
 * is available. Render it as is otherwise.
 */
function theme_ayah($element) {
	$ayah_web_service_host = "ws.areyouahuman.com";
	$ayah_publisher_key = variable_get('ayah_publisher_key', '');
	$url = 'https://' . $ayah_web_service_host . "/ws/script/" . urlencode($ayah_publisher_key);	
	return "<div id='AYAH'></div><script src='". $url ."'></script>";
  // if (!empty($element['#description']) && isset($element['captcha_widgets'])) {
  //   $fieldset = array(
  //     '#type' => 'fieldset',
  //     '#title' => t('CAPTCHA'),
  //     '#description' => $element['#description'],
  //     '#children' => $element['#children'],
  //     '#attributes' => array('class' => 'captcha'),
  //   );
  //   return theme('fieldset', $fieldset);
  // }
  // else {
  //   return '<div class="captcha">'. $element['#children'] .'</div>';
  // }
}





/**
 * Implementation of hook_form_alter().
 *
 * This function adds a AYAH game to forms for untrusted users if needed.
 */
function ayah_form_alter(&$form, $form_state, $form_id) {
// echo '<div><pre>form_id '. check_plain(print_r($form_id , 1)) .'</pre></div>';	
	if (arg(0) != 'admin' || variable_get('ayah_allow_on_admin_pages', false)) {
		module_load_include('inc', 'ayah');
		if (!user_access('skip AYAH')) {
			// See if we need to add the game for this form_id.
			$ayah_form = ayah_get_form_id_setting($form_id);
			if (isset($ayah_form->add_game) && $ayah_form->add_game){
				// Build AYAH form element.
				$ayah_element = array(
				'#type' => 'ayah',
				);
				// Get placement in form and insert in form.
				$ayah_placement = _ayah_get_ayah_placement($form_id, $form);
				_ayah_insert_game_element($form, $ayah_placement, $ayah_element);
			}
		}
	}
	// Add a warning about caching on the Perfomance settings page.
	if ($form_id == 'system_performance_settings') {
		$form['page_cache']['cache']['#description'] .= '<p><strong class="error">'
		. t('Warning: the AYAH module will disable the caching of pages that contain a AYAH game.')
		. '</strong></p>';
	}
}


/**
 * AYAH validation handler.
 *
 * This function is placed in the main captcha.module file to make sure that
 * it is available (even for cached forms, which don't fire
 * ayah_form_alter(), and subsequently don't include additional include
 * files).
 */
function ayah_validate($element, &$form_state) {
	module_load_include('inc', 'ayah');
	$session_secret = null;
	if(array_key_exists("session_secret", $_REQUEST)){
		$session_secret = $_REQUEST["session_secret"];
	}
	$ayah_web_service_host = 'ws.areyouahuman.com';
	$is_a_human = false;
	if ($session_secret) {
		$url = 'https://' . $ayah_web_service_host . "/ws/scoreGame";
		$fields = array(
			'session_secret' => urlencode($session_secret),
			'scoring_key' => variable_get('ayah_scoring_key', '')
		);
		$resp = _ayah_doCall($url, $fields);
		if ($resp) {
			$is_a_human = ($resp->status_code == 1);
		}
	}
	if(!$is_a_human){
		// Wrong answer, set form error
		form_set_error('ayah_response', t('You didn\'t pass the game'));
		// If the AYAH game was on a login form: stop validating, quit the current request
		// and forward to the current page (like a reload) to prevent loging in.
		// We do this because the log in procedure, which happens after ayah_validate(),
		// does not check error conditions of extra form elements like the the AYAH game.
		if ($form_id == 'user_login' || $form_id == 'user_login_block') {
			drupal_goto($_GET['q']);
		} 
	}
}